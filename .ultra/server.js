import{jsx as _jsx}from"react/jsx-runtime";import{serve}from"https://deno.land/std@0.176.0/http/server.ts";import{createServer}from"ultra/server.ts";import App from"./src/app.tsx";// Twind
import{createHeadInsertionTransformStream}from"ultra/stream.ts";import{stringify,tw}from"./src/twind/twind.ts";// React Query
import{QueryClientProvider}from"@tanstack/react-query";import{useDehydrateReactQuery}from"./src/react-query/useDehydrateReactQuery.tsx";import{queryClient}from"./src/react-query/query-client.ts";const server=await createServer({importMapPath:import.meta.resolve("./importMap.json"),browserEntrypoint:import.meta.resolve("./client.tsx")});function ServerApp({context}){useDehydrateReactQuery(queryClient);const requestUrl=new URL(context.req.url);return /*#__PURE__*/_jsx(QueryClientProvider,{client:queryClient,children:/*#__PURE__*/_jsx(App,{})});}server.get("*",async context=>{// clear query cache
queryClient.clear();/**
   * Render the request
   */let result=await server.render(/*#__PURE__*/_jsx(ServerApp,{context:context}));// Inject the style tag into the head of the streamed response
const stylesInject=createHeadInsertionTransformStream(()=>{if(Array.isArray(tw.target)){return Promise.resolve(stringify(tw.target));}throw new Error("Expected tw.target to be an instance of an Array");});result=result.pipeThrough(stylesInject);return context.body(result,200,{"content-type":"text/html; charset=utf-8"});});if(import.meta.main){serve(server.fetch);}export default server;